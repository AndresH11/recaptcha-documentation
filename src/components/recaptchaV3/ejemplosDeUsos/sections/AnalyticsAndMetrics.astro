---
import CustomContainer from "@/components/common/CustomContainer.astro";
import SubTitle from "@/components/common/SubTitle.astro";
import { Icon } from "astro-icon/components";
import { Code } from "astro:components";
import { useTranslations } from "@/i18n/utils";

interface Props {
  lang?: "es" | "en" | "fr" | "it" | "pt" | "pt-BR" | "ja" | "ko";
}

const { lang = "es" } = Astro.props;
const t = useTranslations(lang);

const codeExample = `import CustomContainer from "@/components/common/CustomContainer";
import { useReCaptcha } from "google-react-recaptcha-v3";
import { useState } from "react";
import { useTranslations } from "@/i18n/utils";

interface Props {
  lang?: "es" | "en" | "fr" | "it" | "pt" | "pt-BR" | "ja" | "ko";
}

export function AnalyticsTrackerExample({ lang = "es" }: Props) {
  const [console1, setConsole1] = useState("");
  const [eventLog, setEventLog] = useState<string[]>([]);
  const t = useTranslations(lang);
  
  const [metrics, setMetrics] = useState({
    pageViews: 0,
    buttonClicks: 0,
    newsletterSignups: 0,
  });

  const { execute, isReady } = useReCaptcha({
    siteKey: "YOUR_SITE_KEY",
    action: "page_analytics",
    autoExecute: true, // Ejecutar automáticamente para analytics
    onVerify: async (token) => {
      console.log("token", token);
      setConsole1(token);
      setMetrics((prev) => ({ ...prev, pageViews: prev.pageViews + 1 }));
      setEventLog((prev) => [
        ...prev,
        \`[\${new Date().toLocaleTimeString()}] \${t("examples.analytics.page.view")}\`,
      ]);

      // Enviar métricas con token
      await fetch("/api/analytics/track", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          page: window.location.pathname,
          timestamp: Date.now(),
          recaptchaToken: token,
          userAgent: navigator.userAgent,
        }),
      });
    },
    onError: (error) => {
      console.error("Error:", error.message);
    },
  });

  // Tracking de eventos específicos
  const trackEvent = async (eventName: string, data: unknown) => {
    if (!isReady) return;

    const token = await execute();
    if (token) {
      setConsole1(token);

      // Actualizar métricas
      if (eventName === "button_click") {
        setMetrics((prev) => ({
          ...prev,
          buttonClicks: prev.buttonClicks + 1,
        }));
      } else if (eventName === "newsletter_signup") {
        setMetrics((prev) => ({
          ...prev,
          newsletterSignups: prev.newsletterSignups + 1,
        }));
      }

      setEventLog((prev) => [
        ...prev,
        \`[\${new Date().toLocaleTimeString()}] \${eventName} - \${t("examples.analytics.event.generated")}\`,
      ]);

      await fetch("/api/analytics/event", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          event: eventName,
          data,
          recaptchaToken: token,
        }),
      });
    }
  };

  const clearLog = () => {
    setEventLog([]);
    setMetrics({ pageViews: 0, buttonClicks: 0, newsletterSignups: 0 });
    setConsole1("");
  };

  return (
    <section className="max-w-5xl text-white50 flex flex-col lg:flex-row lg:items-start lg:justify-between gap-6">
      <CustomContainer className="px-6 py-3 max-w-[500px] lg:w-[450px] xl:w-[500px] space-y-4">
        <div className="space-y-4">
          <div className="flex items-center gap-4 justify-between">
            <div className="flex items-center gap-2">
              <div className="h-5 w-5 rounded-full bg-[#FF4444]"></div>
              <div className="h-5 w-5 rounded-full bg-[#F4FF5C]"></div>
              <div className="h-5 w-5 rounded-full bg-[#45FF42]"></div>
            </div>
          </div>

          <h3 className="text-2xl text-white70 font-bold">
            {t("examples.analytics.title")}
          </h3>

          <div className="space-y-3">
            <h4 className="text-lg text-white70 font-semibold">
              {t("examples.analytics.realtime")}
            </h4>
            <div className="grid grid-cols-3 gap-2">
              <div className="bg-white/10 rounded-lg px-3 py-2 text-center">
                <div className="text-2xl font-bold text-white70">
                  {metrics.pageViews}
                </div>
                <div className="text-xs text-white50">{t("examples.analytics.views")}</div>
              </div>
              <div className="bg-white/10 rounded-lg px-3 py-2 text-center">
                <div className="text-2xl font-bold text-white70">
                  {metrics.buttonClicks}
                </div>
                <div className="text-xs text-white50">{t("examples.analytics.clicks")}</div>
              </div>
              <div className="bg-white/10 rounded-lg px-3 py-2 text-center">
                <div className="text-2xl font-bold text-white70">
                  {metrics.newsletterSignups}
                </div>
                <div className="text-xs text-white50">{t("examples.analytics.signups")}</div>
              </div>
            </div>
          </div>

          <div className="space-y-3">
            <h4 className="text-lg text-white70 font-semibold">
              {t("examples.analytics.trackable")}
            </h4>
            <div className="space-y-2">
              <button
                onClick={() =>
                  trackEvent("button_click", { buttonId: "cta-main" })
                }
                className="rounded-xl text-base font-medium text-white70 h-12 px-6 cursor-pointer w-full bg-customGray transition-transform duration-100 hover:bg-customGray/80 hover:scale-105"
              >
                {t("examples.analytics.cta")}
              </button>

              <button
                onClick={() =>
                  trackEvent("newsletter_signup", { source: "homepage" })
                }
                className="rounded-xl text-base font-medium text-white70 h-12 px-6 cursor-pointer w-full bg-customGray transition-transform duration-100 hover:bg-customGray/80 hover:scale-105"
              >
                {t("examples.analytics.newsletter")}
              </button>

              <button
                onClick={clearLog}
                className="rounded-xl text-base font-medium text-white70 h-10 px-4 cursor-pointer w-full bg-white/10 transition-transform duration-100 hover:bg-white/20 hover:scale-105"
              >
                {t("examples.analytics.clear")}
              </button>
            </div>
          </div>

          <p className="text-base text-white50 font-bold text-center pt-4">
            {t("examples.analytics.protected")}{" "}
            <span className="text-white70">reCAPTCHA v3</span>
          </p>
          <p className="text-base text-white50 font-bold text-center">
            {t("start.visual.author")}{" "}
            <a
              href="https://www.linkedin.com/in/andresh11/"
              rel="noopener noreferrer"
              target="_blank"
              className="underline"
            >
              Andrés Hernández
            </a>
          </p>
        </div>
      </CustomContainer>

      <CustomContainer className="px-6 py-3 max-w-[400px] lg:w-[350px] xl:w-[400px] space-y-4">
        <div className="space-y-4">
          <div className="flex items-center gap-4 justify-between">
            <div className="flex items-center gap-2">
              <div className="h-5 w-5 rounded-full bg-[#FF4444]"></div>
              <div className="h-5 w-5 rounded-full bg-[#F4FF5C]"></div>
              <div className="h-5 w-5 rounded-full bg-[#45FF42]"></div>
            </div>
          </div>

          <div className="space-y-2">
            <h3 className="text-lg text-white70 font-bold">{t("examples.analytics.token.title")}</h3>
            <div className="bg-white/10 rounded-xl px-2 py-2 text-white50">
              <textarea
                placeholder={t("examples.console.placeholder")}
                readOnly
                rows={4}
                className="w-full h-full outline-none bg-transparent resize-none scrollbar-hide text-xs"
                value={console1}
              />
            </div>
          </div>

          <div className="space-y-2">
            <h3 className="text-lg text-white70 font-bold">{t("examples.analytics.events.title")}</h3>
            <div className="bg-white/10 rounded-xl px-2 py-2 text-white50">
              <div className="h-48 overflow-y-auto scrollbar-hide">
                {eventLog.length === 0 ? (
                  <p className="text-xs text-white50 italic">
                    {t("examples.analytics.events.empty")}
                  </p>
                ) : (
                  eventLog.map((log, index) => (
                    <div
                      key={index}
                      className="text-xs text-white50 py-1 border-b border-white/10 last:border-b-0"
                    >
                      {log}
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        </div>
      </CustomContainer>
    </section>
  );
}`;
---

<section class="space-y-6 max-w-5xl">
  <SubTitle title={t("examples.analytics.title")} />
  <span class="flex justify-end">
    <a
      href={import.meta.env.DEV
        ? "/recaptchatV3/ejemplos/analiticas-y-metricas"
        : `${import.meta.env.BASE_URL}/recaptchatV3/ejemplos/analiticas-y-metricas`}
      class="text-white50 hover:text-white70 text-end cursor-pointer transition-colors text-base font-bold underline"
    >
      {t("examples.demo.link")}
    </a>
  </span>
  <CustomContainer class="px-6 py-3 max-w-5xl">
    <div class="flex items-center gap-4 justify-between mb-6">
      <div class="flex items-center gap-2">
        <div class="h-5 w-5 rounded-full bg-[#FF4444]"></div>
        <div class="h-5 w-5 rounded-full bg-[#F4FF5C]"></div>
        <div class="h-5 w-5 rounded-full bg-[#45FF42]"></div>
      </div>
      <button
        type="button"
        id="copyCodeBtn3"
        class="text-white50 hover:text-white70 cursor-pointer transition-colors"
        title={t("ui.copy.code")}
      >
        <Icon name="mdi:content-copy" size={24} />
      </button>
    </div>
    <Code
      code={codeExample}
      lang="tsx"
      theme="dracula"
      class="code-transparent"
    />
  </CustomContainer>
</section>

<script is:inline define:vars={{ codeExample }}>
  const copyBtn = document.getElementById("copyCodeBtn3");

  copyBtn?.addEventListener("click", async () => {
    try {
      await navigator.clipboard.writeText(codeExample);

      // Feedback visual - Cambiar a icono de check
      const originalInnerHTML = copyBtn.innerHTML;
      copyBtn.innerHTML =
        '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M21 7L9 19l-5.5-5.5l1.41-1.41L9 16.17L19.59 5.59z"/></svg>';
      copyBtn.classList.add("text-green-400");

      setTimeout(() => {
        copyBtn.innerHTML = originalInnerHTML;
        copyBtn.classList.remove("text-green-400");
      }, 2000);
    } catch (err) {
      console.error("Error al copiar:", err);

      // Feedback de error
      copyBtn.classList.add("text-red-400");
      setTimeout(() => {
        copyBtn.classList.remove("text-red-400");
      }, 2000);
    }
  });
</script>
