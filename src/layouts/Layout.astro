---
import AsideNav from "../components/asideNav/AsideNav.astro";
import Header from "../components/header/Header.astro";
import "../styles/global.css";
import { Icon } from "astro-icon/components";
import {
  getLangFromUrl,
  useTranslations,
  getRouteFromUrl,
  getLocalizedPath,
} from "@/i18n/utils";
import { getPageSEOData } from "@/utils/seo";

const currentLang = getLangFromUrl(Astro.url);
const t = useTranslations(currentLang);
const currentRoute = getRouteFromUrl(Astro.url);
const seoData = getPageSEOData(currentLang, currentRoute);

interface Props {
  titleKey?: string;
  descriptionKey?: string;
  titlePage?: string;
  description?: string;
  keywords?: string;
  image?: string;
  author?: string;
  publishDate?: string;
  modifiedDate?: string;
  type?: string;
  twitterHandle?: string;
}

const {
  titleKey,
  descriptionKey,
  titlePage = titleKey ? t(titleKey as any) : t("seo.title"),
  description = descriptionKey
    ? t(descriptionKey as any)
    : t("seo.description"),
  keywords = t("seo.keywords"),
  image = "/og-image.jpg",
  author = t("seo.author"),
  publishDate = "2025-01-01",
  modifiedDate = "2025-01-01",
  type = "website",
  twitterHandle = "@AndresH11",
} = Astro.props;

const canonicalURL = Astro.url.href;
const siteName = t("seo.site-name");

// Generar URLs alternativas para hreflang
const supportedLanguages = ["es", "en", "fr", "it", "pt", "pt-BR", "ja", "ko"];
const alternateUrls = supportedLanguages.map((lang) => ({
  lang,
  url: new URL(getLocalizedPath(lang, currentRoute), Astro.url.origin).href,
}));

// Configurar idiomas para Open Graph
const ogLocale =
  currentLang === "pt-BR" ? "pt_BR" : currentLang.replace("-", "_");
const ogAlternateLocales = alternateUrls
  .filter((alt) => alt.lang !== currentLang)
  .map((alt) => (alt.lang === "pt-BR" ? "pt_BR" : alt.lang.replace("-", "_")));
---

<!doctype html>
<html lang={currentLang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- SEO Básico -->
    <title>{titlePage}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <meta name="author" content={author} />
    <link rel="canonical" href={canonicalURL} />

    <!-- Robots -->
    <meta name="robots" content="index, follow" />
    <meta name="googlebot" content="index, follow" />

    <!-- Idioma -->
    <meta name="language" content={currentLang} />
    <meta http-equiv="content-language" content={currentLang} />

    <!-- hreflang para SEO multiidioma -->
    {
      alternateUrls.map(({ lang, url }) => (
        <link rel="alternate" hreflang={lang} href={url} />
      ))
    }
    <link
      rel="alternate"
      hreflang="x-default"
      href={new URL(getLocalizedPath("es", currentRoute), Astro.url.origin)
        .href}
    />

    <!-- Open Graph (Facebook, LinkedIn, etc.) -->
    <meta property="og:type" content={type} />
    <meta property="og:title" content={titlePage} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:site_name" content={siteName} />
    <meta property="og:locale" content={ogLocale} />
    {
      ogAlternateLocales.map((locale) => (
        <meta property="og:locale:alternate" content={locale} />
      ))
    }

    <!-- Twitter Cards -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content={twitterHandle} />
    <meta name="twitter:creator" content={twitterHandle} />
    <meta name="twitter:title" content={titlePage} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={new URL(image, Astro.url)} />
    <meta name="twitter:image:alt" content={`${titlePage} - ${siteName}`} />

    <!-- Fechas (si están disponibles) -->
    {
      publishDate && (
        <meta name="article:published_time" content={publishDate} />
      )
    }
    {
      modifiedDate && (
        <meta name="article:modified_time" content={modifiedDate} />
      )
    }

    <!-- Metadatos técnicos -->
    <meta name="theme-color" content="#1f2937" />
    <meta name="msapplication-TileColor" content="#1f2937" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta
      name="apple-mobile-web-app-status-bar-style"
      content="black-translucent"
    />

    <!-- Preconnect para optimización -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Datos estructurados JSON-LD -->
    <script
      type="application/ld+json"
      set:html={JSON.stringify(seoData.structuredData)}
    />
  </head>
  <body class="bg-customGray relative font-NotoSans">
    <Header />
    <AsideNav />
    <div class="ml-0 lg:ml-64 2xl:ml-80">
      <slot />
    </div>
  </body>
</html>
